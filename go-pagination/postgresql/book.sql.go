// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: book.sql

package psql

import (
	"context"
)

const countBooks = `-- name: CountBooks :one
SELECT
    COUNT(id) AS total
FROM
    books
`

func (q *Queries) CountBooks(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countBooks)
	var total int64
	err := row.Scan(&total)
	return total, err
}

const findBooksByOffset = `-- name: FindBooksByOffset :many
SELECT
    id,
    title,
    author,
    created_at,
    updated_at
FROM
    books
ORDER BY
    id DESC
    LIMIT
	$1
OFFSET
    $2
`

type FindBooksByOffsetParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) FindBooksByOffset(ctx context.Context, arg FindBooksByOffsetParams) ([]Book, error) {
	rows, err := q.db.QueryContext(ctx, findBooksByOffset, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Book
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
